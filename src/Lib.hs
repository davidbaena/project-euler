module Lib
  ( euler001
  , euler002
  , euler003
  , euler004
  ) where
-----------
--Euler001: 233168
-----------
--If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
--The sum of these multiples is 23.
--Find the sum of all the multiples of 3 or 5 below 1000.
--DOC List comprehension: https://wiki.haskell.org/List_comprehension
euler001 = sum [x | x <- [1 .. 999], x `mod` 3 == 0 || x `mod` 5 == 0]

-----------
--Euler003: 6857
-----------
--The prime factors of 13195 are 5, 7, 13 and 29.
--
--What is the largest prime factor of the number 600851475143 ?

primes = 2: filter((==1) . length . primeFactors)[3,5..]

primeFactors n = factor n primes
  where
    factor n (p:ps)
      | p*p > n = [n] --N is prime
      | n `mod` p == 0 = p:factor (n `div` p) (p:ps) -- p is prime max factor
      | otherwise = factor n ps
euler003 = last (primeFactors 600851475143)

----------
--Euler004: 906609
----------
--A palindromic number reads the same both ways.
--The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
--Find the largest palindrome made from the product of two 3-digit numbers.

isPalindrome n = let s=show n in s == reverse s
euler004 = maximum [x*y| x <- [100..999], y <- [100..999], isPalindrome (x*y)]


----------
--Euler002: 4613732
----------
--Each new term in the Fibonacci sequence is generated by adding the previous two terms.
--By starting with 1 and 2, the first 10 terms will be:
--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--By considering the terms in the Fibonacci sequence whose values do not exceed four million,
--find the sum of the even-valued terms.
euler002 = sum [x| x <- takeWhile (<=4000000) fibs,  even x]
          where
          fibs = 1 : 1 : zipWith (+) fibs (tail fibs)
